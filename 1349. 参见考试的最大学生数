class Solution {
public:
    int maxStudents(vector<vector<char>>& grid) {
        int m = grid.size(), n = grid[0].size();

        vector<int> t(m);
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++) 
                if(grid[i][j] == '.') t[i] |= (1 << j);
        }

        int mem[m][1 << n];
        memset(mem, -1, sizeof mem);

        auto dfs = [&](auto&& dfs, int i, int j)
        {
            if(i == 0)
            {
                int c = 0;
                for(int k = 0; k < 8; k++)
                {
                    if(j >> k & 1)
                    {
                        c++;
                        if(j >> (k + 1) & 1) j ^= 1 << (k + 1);
                    }
                }

                return c;
            }
            if(mem[i][j] != -1) return mem[i][j];

            int res = dfs(dfs, i - 1, t[i - 1]);
            for(int mask = j; mask; mask = j & (mask - 1))
            {
                if((mask >> 1 & mask) == 0)
                {
                    int c = t[i - 1] & ~(mask << 1 | mask >> 1);
                    res = max(res, dfs(dfs, i - 1, c) + __builtin_popcount(mask));
                }
            }

            return mem[i][j] = res;
        };  

        return dfs(dfs, m - 1, t[m - 1]);
    }
};
