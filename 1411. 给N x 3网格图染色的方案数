class Solution {
public:
    int numOfWays(int n) {
        int mod = 1e9 + 7;
        int mem[n + 1][1 << 10];
        memset(mem, -1, sizeof mem);

        auto dfs = [&](auto&&dfs, int r, int mask)
        {
            if(r == n) 
            {
                return 1;
            }
            if(mem[r][mask] != -1) return mem[r][mask];

            int res = 0;
            for(int i = 0; i < 3; i++)
            {
                if(mask >> i & 1) continue;
                for(int j = 0; j < 3; j++)
                {
                    if((mask >> (3 + j) & 1) || (j == i)) continue;
                    for(int k = 0; k < 3; k++)
                    {
                        if((mask >> (6 + k) & 1) || (k == j)) continue;
                        res = (res + dfs(dfs, r + 1, (1 << i) | (1 << (j + 3)) | (1 << (k + 6)))) % mod;
                    }
                }
            }
           

            return mem[r][mask] = res;
        };

        return dfs(dfs, 0, 0);
    }
};
