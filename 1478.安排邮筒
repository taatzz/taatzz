class Solution {
public:
    int minDistance(vector<int>& nums, int k) {
        int n = nums.size(), inf = INT_MAX / 2;
        sort(nums.begin(), nums.end());
        vector<vector<int>> distance(n, vector<int>(n, 0));

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int mid = (i + j) >> 1;

                for (int k = i; k <= j; k++) {
                    distance[i][j] += abs(nums[k] - nums[mid]);
                }
            }
        }


        int mem[n + 1][k + 1];
        memset(mem, -1, sizeof mem);

        auto dfs = [&](auto&& dfs, int i, int k)->int
        {
            if(i < 0) return k == 0 ? 0 : inf; 
            if(k < 0) return inf;
            if(mem[i][k] != -1) return mem[i][k];

            int res = inf, mx = INT_MIN, mn = INT_MAX;
            for(int j = i; j >= 0; j--)
            {
                int sum = 0;

                res = min(res, dfs(dfs, j - 1, k - 1) + distance[j][i]);
            }

            return mem[i][k] = res;
        };

        return dfs(dfs, n - 1, k);
    }
};
