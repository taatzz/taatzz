class Solution {
public:
    int minNumberOfSemesters(int n, vector<vector<int>>& nums, int k) {
        unordered_map<int, vector<int>> h;
        int inf = INT_MAX / 2;
        for(auto& e : nums)
        {
            h[e[1]].push_back(e[0]);
        }
        vector<int> t(1 << n);
        for(int mask = 0; mask < (1 << n); mask++)
        {
            int cur = 0;
            for(int i = 1; i <= n; i++)
            {
                bool flag = 1;
                if(mask >> (i - 1) & 1) continue;
                if(h.count(i))
                    for(int x : h[i])
                    {
                        if((mask >> (x - 1) & 1) == 0) flag = 0;
                    }
                if(flag) cur |= (1 << (i - 1));
            }

            t[mask] = cur;
        }
        int mem[1 << n];
        memset(mem, -1, sizeof mem);

        auto dfs = [&](auto&& dfs, int mask)
        {
            if(mask == (1 << n) - 1) return 0;
            if(mem[mask] != -1) return mem[mask];

            int res = inf, cur = t[mask];

            for(int i = cur; i; i = (i - 1) & cur)
            {
                if(__builtin_popcount(i) <= k)
                {
                    res = min(res, dfs(dfs, mask | i) + 1);
                }
            }
            
            return mem[mask] = res;
        };  

        return dfs(dfs, 0);
    }
};
