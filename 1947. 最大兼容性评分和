class Solution {
public:
    int maxCompatibilitySum(vector<vector<int>>& nums1, vector<vector<int>>& nums2) {
        int n = nums1.size();
        int mem[n][1 << n];
        memset(mem, -1, sizeof mem);

        auto dfs = [&](auto&& dfs, int i, int mask)      
        {
            if(i >= n) return 0;
            if(mem[i][mask] != -1) return mem[i][mask];

            int res = 0;
            for(int j = 0; j < n; j++)
            {
                if(mask >> j & 1) continue;
                int c = 0;
                for(int k = 0; k < nums1[i].size(); k++) c += (nums1[i][k] == nums2[j][k]);
                res = max(res, dfs(dfs, i + 1, 1 << j | mask) + c);
            }

            return mem[i][mask] = res;
        };

        return dfs(dfs, 0, 0);
    }
};
