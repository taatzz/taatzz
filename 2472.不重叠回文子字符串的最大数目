class Solution {
public:
    int maxPalindromes(string s, int k) {
        int n = s.size();

        vector<vector<int>> st(n + 1, vector<int>(n + 1));
        for(int i = n - 1; i >= 0; i--)
        {
            st[i][i] = 1;
            if(i + 1 < n) st[i][i + 1] = (s[i] == s[i + 1]);
            for(int j = i + 2; j < n; j++)
                st[i][j] = st[i + 1][j - 1] && (s[i] == s[j]);
        }

        int mem[n + 1];
        memset(mem, -1, sizeof mem);
        auto dfs = [&](auto&& dfs, int i)->int
        {
            if(i < k - 1) return 0;

            int& res = mem[i];
            if(res != -1) return res;
            res = 0;

            res = max(res, dfs(dfs, i - 1));

            for(int j = i - k + 1; j >= 0; j--)
            {
                if(st[j][i])
                    res = max(res, dfs(dfs, j - 1) + 1);
            }

            return res;
        };

        return dfs(dfs, n - 1);
    }
};
