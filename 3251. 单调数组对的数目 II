class Solution {
public:
    int countOfPairs(vector<int>& nums) {
        int n = nums.size(), mod = 1e9 + 7;
        int mx = *max_element(nums.begin(), nums.end());
        int mem[n + 1][mx + 1];
        memset(mem, -1, sizeof mem);

        auto dfs = [&](auto&& dfs, int i, int j)
        {
            if(i < 0) return 1;
            if(mem[i][j] != -1) return mem[i][j];

            int res = 0;
            for(int k = j; k >= 0; k--)
            {
                if(i == n - 1)
                {
                    res = (res + dfs(dfs, i - 1, k)) % mod;
                }
                else
                {
                    if(nums[i] - k >= nums[i + 1] - j)    
                    {
                        res = (res + dfs(dfs, i - 1, k)) % mod;
                    }
                }
            }

            return mem[i][j] = res;
        };

        // return dfs(dfs, n - 1, nums[n - 1]);

        vector<vector<long long>> f(n + 1, vector<long long>(mx + 1));
        for(int i = 0; i <= mx; i++) f[0][i] = 1;
        vector<long long> s(mx + 1);

        for(int i = 1; i < n; i++)
        {
            s[0] = f[i - 1][0];
            for(int j = 1; j <= mx; j++) s[j] = s[j - 1] + f[i - 1][j];
            
            // partial_sum(f[i - 1].begin(), f[i - 1].end(), s.begin());
            // for(int j = 0; j <= mx; j++) cout << s[j] << ' ';
            // cout << endl;
            for(int j = 0; j <= nums[i]; j++)
            {
                int maxk = j + min(nums[i - 1] - nums[i], 0);
                f[i][j] = maxk >= 0 ? s[maxk] % mod : 0;
            }
        }

        return accumulate(f[n - 1].begin(), f[n - 1].end(), 0LL) % mod;
    }
};
