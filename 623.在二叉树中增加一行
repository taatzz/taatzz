/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* addOneRow(TreeNode* root, int val, int depth) {
        if(depth == 1)
        {
            return new TreeNode(val, root, nullptr);
        }

        auto dfs = [&](auto&& dfs, TreeNode* node, int d)
        {
            if(!node || d > depth - 1) return;

            if(d == depth - 1)
            {
                TreeNode* newnode = new TreeNode(val);
                newnode->left = node->left;
                node->left = newnode;
                TreeNode* newnode1 = new TreeNode(val);
                newnode1->right = node->right;
                node->right = newnode1;
            }

            dfs(dfs, node->left, d + 1);
            dfs(dfs, node->right, d + 1);
        };

        dfs(dfs, root, 1);
        return root;
    }
};
