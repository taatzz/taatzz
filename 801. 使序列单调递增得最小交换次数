class Solution {
public:
    int minSwap(vector<int>& nums1, vector<int>& nums2) {
        int n = nums1.size(), inf = INT_MAX / 2;
        int mem[n][2];
        memset(mem, -1, sizeof mem);

        auto dfs = [&](auto&& dfs, int i, bool pre)
        {
            if(i < 0) return 0;
            if(mem[i][pre] != -1) return mem[i][pre];

            int res = inf;
            if(!pre)
            {
                if(nums1[i] < nums1[i + 1] && nums2[i] < nums2[i + 1])
                    res = min(res, dfs(dfs, i - 1, 0));
                if(nums2[i] < nums1[i + 1] && nums1[i] < nums2[i + 1])
                    res = min(res, dfs(dfs, i - 1, 1) + 1);
            }
            else
            {
                if(nums1[i] < nums2[i + 1] && nums2[i] < nums1[i + 1])
                    res = min(res, dfs(dfs, i - 1, 0));
                if(nums2[i] < nums2[i + 1] && nums1[i] < nums1[i + 1])
                    res = min(res, dfs(dfs, i - 1, 1) + 1);
            }

            return mem[i][pre] = res;
        };

        return min(dfs(dfs, n - 2, 0), dfs(dfs, n - 2, 1) + 1);
    }
};
