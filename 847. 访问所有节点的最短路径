class Solution {
public:
    int shortestPathLength(vector<vector<int>>& graph) {
        int n = graph.size();

        vector<vector<int>> dist(n, vector<int>(n));

        auto bfs = [&](int i)
        {
            queue<int> q;
            q.push(i);

            vector<int> st(n), d(n);
            st[i] = 1, d[i] = 0;
            while(q.size())
            {
                auto t = q.front();
                q.pop();

                for(int x : graph[t])
                {
                    if(!st[x])
                    {
                        d[x] = d[t] + 1;
                        q.push(x);
                        st[x] = 1;
                        dist[i][x] = d[x];
                    }
                }
            }
        };

        for(int i = 0; i < n; i++) bfs(i);

        int mem[1 << n][n];
        memset(mem, -1, sizeof mem);

        auto dfs = [&](auto&& dfs, int mask, int pre)
        {
            if(mask == (1 << n) - 1) return 0;
            if(pre != -1 && mem[mask][pre] != -1) return mem[mask][pre];

            int res = INT_MAX;
            for(int i = 0; i < n; i++)
            {
                if(mask >> i & 1) continue;
                int c = 0;
                if(pre != -1) c = dist[pre][i];
                res = min(res, dfs(dfs, 1 << i | mask, i) + c);
            }
            if(pre != -1) mem[mask][pre] = res;

            return res;
        };


        return dfs(dfs, 0, -1);
    }
};
