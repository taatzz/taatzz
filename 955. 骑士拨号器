
class Solution {
public:
    int knightDialer(int n) {
        if(n == 1) return 10;
        int mod = 1e9 + 7;
        vector<int> t[10] = {{4, 6}, {6, 8}, {7, 9}, {4, 8}, {0, 3, 9}, {}, {0, 1, 7}, {2, 6}, {1, 3}, {2, 4}};
        int mem[5000][10];
        memset(mem, 0, sizeof mem);

        auto dfs = [&](auto&& dfs, int i, int j)
        {
            if(i == 0) return 1;

            int& res = mem[i][j];
            if(res) return res;
            for(int k : t[j])
            {
                res = (res + dfs(dfs, i - 1, k)) % mod;
            }

            return res;
        };

        long long res = 0;
        for(int j = 0; j < 10; j++)
        {
            res += dfs(dfs, n - 1, j);
        }

        return res % mod;
    }
};
